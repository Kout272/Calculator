from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout,
                             QGridLayout, QLineEdit, QPushButton,
                             QMessageBox, QStackedWidget, QSizePolicy, QTextEdit,
                             QTabWidget, QHBoxLayout, QLabel, QScrollArea, QInputDialog,
                             QComboBox, QGroupBox, QCheckBox, QListWidget, QListWidgetItem)
from PyQt5.QtCore import Qt, QPropertyAnimation, QEasingCurve, pyqtProperty, QTimer
from PyQt5.QtGui import QFont, QKeyEvent
from PyQt5.QtMultimedia import QSoundEffect
from PyQt5.QtCore import QUrl
import os
try:
    import requests
    import json
    from datetime import datetime, timedelta
    REQUESTS_AVAILABLE = True
except ImportError:
    REQUESTS_AVAILABLE = False
    print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.")
    # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫–∞–∫ fallback
    FALLBACK_RATES = {
        "USD": {"BYN": 3.2, "EUR": 0.85, "RUB": 95.0, "UAH": 36.5, "PLN": 4.0, "GBP": 0.79, "CHF": 0.88, "JPY": 150.0, "CNY": 7.2, "CAD": 1.35, "AUD": 1.52},
        "EUR": {"BYN": 3.76, "USD": 1.18, "RUB": 111.8, "UAH": 42.9, "PLN": 4.7, "GBP": 0.93, "CHF": 1.04, "JPY": 176.5, "CNY": 8.47, "CAD": 1.59, "AUD": 1.79},
        "BYN": {"USD": 0.31, "EUR": 0.27, "RUB": 29.7, "UAH": 11.4, "PLN": 1.25, "GBP": 0.25, "CHF": 0.28, "JPY": 46.9, "CNY": 2.25, "CAD": 0.42, "AUD": 0.48},
        "RUB": {"USD": 0.011, "EUR": 0.009, "BYN": 0.034, "UAH": 0.38, "PLN": 0.042, "GBP": 0.008, "CHF": 0.009, "JPY": 1.58, "CNY": 0.076, "CAD": 0.014, "AUD": 0.016},
        "UAH": {"USD": 0.027, "EUR": 0.023, "BYN": 0.088, "RUB": 2.63, "PLN": 0.11, "GBP": 0.022, "CHF": 0.024, "JPY": 4.11, "CNY": 0.20, "CAD": 0.037, "AUD": 0.042},
        "PLN": {"USD": 0.25, "EUR": 0.21, "BYN": 0.80, "RUB": 23.8, "UAH": 9.09, "GBP": 0.20, "CHF": 0.22, "JPY": 37.5, "CNY": 1.80, "CAD": 0.34, "AUD": 0.38},
        "GBP": {"USD": 1.27, "EUR": 1.08, "BYN": 4.0, "RUB": 120.0, "UAH": 45.6, "PLN": 5.0, "CHF": 1.11, "JPY": 190.0, "CNY": 9.1, "CAD": 1.71, "AUD": 1.93},
        "CHF": {"USD": 1.14, "EUR": 0.96, "BYN": 3.6, "RUB": 108.0, "UAH": 41.0, "PLN": 4.5, "GBP": 0.90, "JPY": 170.0, "CNY": 8.2, "CAD": 1.54, "AUD": 1.73},
        "JPY": {"USD": 0.0067, "EUR": 0.0057, "BYN": 0.021, "RUB": 0.63, "UAH": 0.24, "PLN": 0.027, "GBP": 0.0053, "CHF": 0.0059, "CNY": 0.048, "CAD": 0.009, "AUD": 0.010},
        "CNY": {"USD": 0.14, "EUR": 0.12, "BYN": 0.44, "RUB": 13.2, "UAH": 5.0, "PLN": 0.56, "GBP": 0.11, "CHF": 0.12, "JPY": 20.8, "CAD": 0.19, "AUD": 0.21},
        "CAD": {"USD": 0.74, "EUR": 0.63, "BYN": 2.4, "RUB": 71.4, "UAH": 27.0, "PLN": 2.9, "GBP": 0.58, "CHF": 0.65, "JPY": 111.0, "CNY": 5.3, "AUD": 1.13},
        "AUD": {"USD": 0.66, "EUR": 0.56, "BYN": 2.1, "RUB": 63.0, "UAH": 24.0, "PLN": 2.6, "GBP": 0.52, "CHF": 0.58, "JPY": 98.0, "CNY": 4.7, "CAD": 0.88}
    }
from calculator_core import CalculatorEngine, StepByStepSolver
from styles import CalculatorStyles


class AnimatedButton(QPushButton):
    def __init__(self, text, parent=None):
        super().__init__(text, parent)
        self._scale = 1.0
        self._glow = 0.0
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scale_animation = QPropertyAnimation(self, b"scale")
        self.scale_animation.setDuration(150)
        self.scale_animation.setEasingCurve(QEasingCurve.OutBack)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è —Å–≤–µ—á–µ–Ω–∏—è
        self.glow_animation = QPropertyAnimation(self, b"glow")
        self.glow_animation.setDuration(200)
        self.glow_animation.setEasingCurve(QEasingCurve.OutQuart)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Å–≤–µ—á–µ–Ω–∏—è
        self.glow_timer = QTimer()
        self.glow_timer.setSingleShot(True)
        self.glow_timer.timeout.connect(self.reset_glow)

    @pyqtProperty(float)
    def scale(self):
        return self._scale

    @scale.setter
    def scale(self, value):
        self._scale = value
        self.update()

    @pyqtProperty(float)
    def glow(self):
        return self._glow

    @glow.setter
    def glow(self, value):
        self._glow = value
        self.update()

    def mousePressEvent(self, event):
        # –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
        self.scale_animation.setStartValue(1.0)
        self.scale_animation.setEndValue(0.85)
        self.scale_animation.start()
        
        # –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
        self.glow_animation.setStartValue(0.0)
        self.glow_animation.setEndValue(1.0)
        self.glow_animation.start()
        
        # –°–±—Ä–æ—Å —Å–≤–µ—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 300–º—Å
        self.glow_timer.start(300)
        
        super().mousePressEvent(event)

    def mouseReleaseEvent(self, event):
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
        self.scale_animation.setStartValue(0.85)
        self.scale_animation.setEndValue(1.0)
        self.scale_animation.start()
        
        super().mouseReleaseEvent(event)

    def enterEvent(self, event):
        # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        self.scale_animation.setStartValue(1.0)
        self.scale_animation.setEndValue(1.05)
        self.scale_animation.start()
        super().enterEvent(event)

    def leaveEvent(self, event):
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞
        self.scale_animation.setStartValue(1.05)
        self.scale_animation.setEndValue(1.0)
        self.scale_animation.start()
        super().leaveEvent(event)

    def reset_glow(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è"""
        self.glow_animation.setStartValue(1.0)
        self.glow_animation.setEndValue(0.0)
        self.glow_animation.start()

    def paintEvent(self, event):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        from PyQt5.QtGui import QPainter, QPen, QBrush, QColor
        from PyQt5.QtCore import QRect
        
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–∫–∏
        rect = self.rect()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        if self._scale != 1.0:
            center = rect.center()
            painter.translate(center)
            painter.scale(self._scale, self._scale)
            painter.translate(-center)
        
        # –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
        if self._glow > 0:
            glow_pen = QPen(QColor(255, 255, 255, int(100 * self._glow)))
            glow_pen.setWidth(int(8 * self._glow))
            painter.setPen(glow_pen)
            painter.setBrush(QBrush())
            painter.drawRoundedRect(rect.adjusted(4, 4, -4, -4), 35, 35)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É
        super().paintEvent(event)


class MultiCalculator(QMainWindow):
    def __init__(self):
        super().__init__()
        self.current_input = ""
        self.last_result = None
        self.result_displayed = False
        self.calculator_engine = CalculatorEngine()
        self.step_solver = StepByStepSolver()
        self.styles = CalculatorStyles()
        self.sound_effect = QSoundEffect()
        self.currency_rates = {}  # –ö—ç—à –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        self.last_currency_update = None
        self.setup_sound()
        self.initUI()

    def setup_sound(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ñ–∞–π–ª)
            self.sound_effect.setSource(QUrl.fromLocalFile(""))
        except:
            pass  # –ï—Å–ª–∏ –∑–≤—É–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ

    def initUI(self):
        self.setWindowTitle('–ú—É–ª—å—Ç–∏-–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä Pro')
        self.setMinimumSize(900, 700)
        self.resize(1000, 750)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –ì–ª–∞–≤–Ω—ã–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π layout
        main_layout = QVBoxLayout()
        central_widget.setLayout(main_layout)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(15, 15, 15, 15)

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        main_layout.addWidget(self.tab_widget)

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–∞
        self.basic_calc = self.create_basic_calculator()
        self.scientific_calc = self.create_scientific_calculator()
        self.programmer_calc = self.create_programmer_tab()
        self.graph_calc = self.create_graph_tab()
        self.financial_calc = self.create_financial_calculator()
        self.notes_window = self.create_notes_window()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ (–ó–∞–º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
        self.tab_widget.addTab(self.basic_calc, "üì± –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
        self.tab_widget.addTab(self.scientific_calc, "üî¨ –ù–∞—É—á–Ω—ã–π")
        self.tab_widget.addTab(self.programmer_calc, "üßÆ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç")
        self.tab_widget.addTab(self.graph_calc, "üìà –ì—Ä–∞—Ñ–∏–∫")
        self.tab_widget.addTab(self.financial_calc, "üí∞ –§–∏–Ω–∞–Ω—Å—ã")
        self.tab_widget.addTab(self.notes_window, "üìù –ó–∞–º–µ—Ç–∫–∏")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
        self.apply_styles()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        self.setFocusPolicy(Qt.StrongFocus)

    def create_programmer_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ (—Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –∏ —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞)"""
        widget = QWidget()
        main_layout = QVBoxLayout(); widget.setLayout(main_layout)
        main_layout.setContentsMargins(0,0,0,0)

        # –°–∫—Ä–æ–ª–ª-–æ–±–ª–∞—Å—Ç—å
        scroll = QScrollArea(); scroll.setWidgetResizable(True)
        main_layout.addWidget(scroll)
        content = QWidget(); scroll.setWidget(content)
        layout = QVBoxLayout(content)
        layout.setSpacing(16)
        layout.setContentsMargins(6, 6, 6, 12)

        # –í–µ—Ä—Ö: –≤–≤–æ–¥ —á–∏—Å–ª–∞ –∏ –≤—ã–±–æ—Ä —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è
        top = QHBoxLayout()
        layout.addLayout(top)

        self.prog_input = QLineEdit()
        self.prog_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, FF –∏–ª–∏ 1011)")
        top.addWidget(self.prog_input, 3)

        self.prog_base = QComboBox()
        self.prog_base.addItems(["BIN", "OCT", "DEC", "HEX"])
        self.prog_base.setCurrentText("DEC")
        top.addWidget(self.prog_base, 1)

        convert_btn = AnimatedButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏")
        convert_btn.clicked.connect(self.prog_convert)
        convert_btn.setStyleSheet(self.styles.get_function_style())
        top.addWidget(convert_btn, 1)

        # –°—Ä–µ–¥–Ω—è—è –ø–∞–Ω–µ–ª—å: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        grid = QGridLayout(); grid.setHorizontalSpacing(12); grid.setVerticalSpacing(8)
        layout.addLayout(grid)

        self.out_bin = QLineEdit(); self.out_bin.setReadOnly(True)
        self.out_oct = QLineEdit(); self.out_oct.setReadOnly(True)
        self.out_dec = QLineEdit(); self.out_dec.setReadOnly(True)
        self.out_hex = QLineEdit(); self.out_hex.setReadOnly(True)

        grid.addWidget(QLabel("BIN"), 0, 0); grid.addWidget(self.out_bin, 0, 1)
        grid.addWidget(QLabel("OCT"), 1, 0); grid.addWidget(self.out_oct, 1, 1)
        grid.addWidget(QLabel("DEC"), 2, 0); grid.addWidget(self.out_dec, 2, 1)
        grid.addWidget(QLabel("HEX"), 3, 0); grid.addWidget(self.out_hex, 3, 1)

        # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        ops_box = QGroupBox("–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤ –ª—é–±–æ–π —Å–∏—Å—Ç–µ–º–µ)")
        ops_layout = QGridLayout(); ops_box.setLayout(ops_layout)
        ops_layout.setHorizontalSpacing(10); ops_layout.setVerticalSpacing(8)
        layout.addWidget(ops_box)

        self.op_a = QLineEdit(); self.op_b = QLineEdit()
        self.op_base = QComboBox(); self.op_base.addItems(["BIN", "OCT", "DEC", "HEX"]); self.op_base.setCurrentText("HEX")
        and_btn = AnimatedButton("A AND B"); and_btn.clicked.connect(lambda: self.prog_logic("AND"))
        or_btn = AnimatedButton("A OR B"); or_btn.clicked.connect(lambda: self.prog_logic("OR"))
        xor_btn = AnimatedButton("A XOR B"); xor_btn.clicked.connect(lambda: self.prog_logic("XOR"))
        not_btn = AnimatedButton("NOT A"); not_btn.clicked.connect(lambda: self.prog_logic("NOT"))
        for b in [and_btn, or_btn, xor_btn, not_btn]:
            b.setStyleSheet(self.styles.get_operator_style())

        self.op_result = QLineEdit(); self.op_result.setReadOnly(True)

        ops_layout.addWidget(QLabel("A"), 0, 0); ops_layout.addWidget(self.op_a, 0, 1)
        ops_layout.addWidget(QLabel("B"), 1, 0); ops_layout.addWidget(self.op_b, 1, 1)
        ops_layout.addWidget(QLabel("Base"), 2, 0); ops_layout.addWidget(self.op_base, 2, 1)
        ops_layout.addWidget(and_btn, 0, 2); ops_layout.addWidget(or_btn, 0, 3)
        ops_layout.addWidget(xor_btn, 1, 2); ops_layout.addWidget(not_btn, 1, 3)
        ops_layout.addWidget(QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç"), 2, 2); ops_layout.addWidget(self.op_result, 2, 3)

        # –ë–∏—Ç–æ–≤—ã–π —Å–¥–≤–∏–≥
        shift_box = QGroupBox("–ë–∏—Ç–æ–≤—ã–π —Å–¥–≤–∏–≥")
        shift_layout = QGridLayout(); shift_box.setLayout(shift_layout)
        shift_layout.setHorizontalSpacing(10); shift_layout.setVerticalSpacing(8)
        layout.addWidget(shift_box)

        self.shift_input = QLineEdit(); self.shift_bits = QLineEdit(); self.shift_bits.setPlaceholderText("–Ω–∞ —Å–∫–æ–ª—å–∫–æ")
        self.shift_base = QComboBox(); self.shift_base.addItems(["BIN", "DEC", "HEX"])
        left_btn = AnimatedButton("<<"); left_btn.clicked.connect(lambda: self.prog_shift("LEFT"))
        right_btn = AnimatedButton(">>"); right_btn.clicked.connect(lambda: self.prog_shift("RIGHT"))
        for b in [left_btn, right_btn]:
            b.setStyleSheet(self.styles.get_operator_style())

        self.shift_bin = QLineEdit(); self.shift_bin.setReadOnly(True)
        shift_layout.addWidget(QLabel("–ß–∏—Å–ª–æ"), 0, 0); shift_layout.addWidget(self.shift_input, 0, 1)
        shift_layout.addWidget(QLabel("Base"), 0, 2); shift_layout.addWidget(self.shift_base, 0, 3)
        shift_layout.addWidget(QLabel("–°–¥–≤–∏–≥"), 1, 0); shift_layout.addWidget(self.shift_bits, 1, 1)
        shift_layout.addWidget(left_btn, 1, 2); shift_layout.addWidget(right_btn, 1, 3)
        shift_layout.addWidget(QLabel("BIN"), 2, 0); shift_layout.addWidget(self.shift_bin, 2, 1, 1, 3)

        # –¶–≤–µ—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
        color_box = QGroupBox("–¶–≤–µ—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏")
        color_layout = QGridLayout(); color_box.setLayout(color_layout)
        color_layout.setHorizontalSpacing(10); color_layout.setVerticalSpacing(8)
        layout.addWidget(color_box)

        self.color_hex = QLineEdit(); self.color_hex.setPlaceholderText("#RRGGBB")
        color_btn = AnimatedButton("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å"); color_btn.clicked.connect(self.prog_color_convert)
        color_btn.setStyleSheet(self.styles.get_function_style())
        self.color_rgb = QLineEdit(); self.color_hsl = QLineEdit(); self.color_cmyk = QLineEdit()
        for e in [self.color_rgb, self.color_hsl, self.color_cmyk]:
            e.setReadOnly(True)
        color_layout.addWidget(QLabel("HEX"), 0, 0); color_layout.addWidget(self.color_hex, 0, 1)
        color_layout.addWidget(color_btn, 0, 2)
        color_layout.addWidget(QLabel("RGB"), 1, 0); color_layout.addWidget(self.color_rgb, 1, 1, 1, 2)
        color_layout.addWidget(QLabel("HSL"), 2, 0); color_layout.addWidget(self.color_hsl, 2, 1, 1, 2)
        color_layout.addWidget(QLabel("CMYK"), 3, 0); color_layout.addWidget(self.color_cmyk, 3, 1, 1, 2)

        # UNIX time –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        misc_box = QGroupBox("UNIX-–≤—Ä–µ–º—è –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π")
        misc_layout = QGridLayout(); misc_box.setLayout(misc_layout)
        misc_layout.setHorizontalSpacing(10); misc_layout.setVerticalSpacing(8)
        layout.addWidget(misc_box)

        self.unix_input = QLineEdit(); self.unix_input.setPlaceholderText("UNIX timestamp –∏–ª–∏ –¥–∞—Ç–∞ YYYY-MM-DD HH:MM:SS")
        unix_to_date = AnimatedButton("‚Üí –î–∞—Ç–∞"); unix_to_date.setStyleSheet(self.styles.get_function_style())
        date_to_unix = AnimatedButton("‚Üí UNIX"); date_to_unix.setStyleSheet(self.styles.get_function_style())
        unix_to_date.clicked.connect(lambda: self.prog_unix_convert("to_date"))
        date_to_unix.clicked.connect(lambda: self.prog_unix_convert("to_unix"))
        self.unix_result = QLineEdit(); self.unix_result.setReadOnly(True)
        misc_layout.addWidget(self.unix_input, 0, 0, 1, 2)
        misc_layout.addWidget(unix_to_date, 0, 2); misc_layout.addWidget(date_to_unix, 0, 3)
        misc_layout.addWidget(self.unix_result, 1, 0, 1, 4)

        self.pass_len = QLineEdit(); self.pass_len.setPlaceholderText("–î–ª–∏–Ω–∞")
        self.pass_chars = QLineEdit(); self.pass_chars.setPlaceholderText("–ù–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ (–ø—É—Å—Ç–æ = —Å—Ç–∞–Ω–¥–∞—Ä—Ç)")
        self.pass_exclude_similar = QCheckBox("–ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ (O0Il1)")
        gen_btn = AnimatedButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å")
        gen_btn.setStyleSheet(self.styles.get_more_button_style())
        gen_btn.clicked.connect(self.prog_generate_password)
        self.pass_result = QLineEdit(); self.pass_result.setReadOnly(True)
        misc_layout.addWidget(self.pass_len, 2, 0)
        misc_layout.addWidget(self.pass_chars, 2, 1)
        misc_layout.addWidget(self.pass_exclude_similar, 2, 2)
        misc_layout.addWidget(gen_btn, 2, 3)
        misc_layout.addWidget(self.pass_result, 3, 0, 1, 4)

        layout.addStretch(1)
        return widget

    def create_graph_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–∑–∞–≥–æ—Ç–æ–≤–∫–∞ UI)"""
        widget = QWidget()
        layout = QVBoxLayout(); widget.setLayout(layout)
        layout.setSpacing(10); layout.setContentsMargins(0, 0, 0, 0)

        top = QHBoxLayout(); layout.addLayout(top)
        self.graph_expr = QLineEdit(); self.graph_expr.setPlaceholderText("f(x) = sin(x)/x")
        plot_btn = AnimatedButton("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫")
        plot_btn.setStyleSheet(self.styles.get_function_style())
        plot_btn.clicked.connect(self.plot_graph)
        top.addWidget(QLabel("f(x) =")); top.addWidget(self.graph_expr, 1); top.addWidget(plot_btn)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä + —Ñ–∏–∫—Å–∏—Ä—É–µ–º layout –æ–¥–∏–Ω —Ä–∞–∑
        self.graph_canvas_container = QWidget()
        self.graph_canvas_layout = QVBoxLayout(self.graph_canvas_container)
        self.graph_canvas_layout.setContentsMargins(6,6,6,6)
        layout.addWidget(self.graph_canvas_container, 1)

        return widget

    def create_display(self):
        display = QTextEdit()
        display.setFont(QFont('Arial', 28))
        display.setAlignment(Qt.AlignRight)
        display.setReadOnly(False)  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        display.setMaximumHeight(90)
        display.setMinimumHeight(90)
        display.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        display.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        display.textChanged.connect(self.on_display_text_changed)
        return display

    def on_display_text_changed(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç current_input –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –¥–∏—Å–ø–ª–µ–µ"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–∏—Å–ø–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        current_tab = self.tab_widget.currentIndex()
        if current_tab == 0:  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            self.current_input = self.basic_display.toPlainText()
        elif current_tab == 1:  # –ù–∞—É—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            self.current_input = self.scientific_display.toPlainText()

    def format_text_with_rainbow_colors(self, text):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ä–∞–¥—É–∂–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è —Ü–∏—Ñ—Ä –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
        # –†–∞–¥—É–∂–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ü–∏—Ñ—Ä
        rainbow_colors = {
            '0': '#ff0000',  # –ö—Ä–∞—Å–Ω—ã–π
            '1': '#ff8000',  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            '2': '#ffff00',  # –ñ–µ–ª—Ç—ã–π
            '3': '#80ff00',  # –ñ–µ–ª—Ç–æ-–∑–µ–ª–µ–Ω—ã–π
            '4': '#00ff00',  # –ó–µ–ª–µ–Ω—ã–π
            '5': '#00ff80',  # –ó–µ–ª–µ–Ω–æ-–≥–æ–ª—É–±–æ–π
            '6': '#00ffff',  # –ì–æ–ª—É–±–æ–π
            '7': '#0080ff',  # –°–∏–Ω–∏–π
            '8': '#0000ff',  # –°–∏–Ω–∏–π
            '9': '#8000ff',  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        }
        
        # –†–∞–¥—É–∂–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        operator_colors = {
            '+': '#ff0080',  # –†–æ–∑–æ–≤—ã–π
            '-': '#ff4000',  # –ö—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
            '*': '#ff8000',  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            '/': '#ffff00',  # –ñ–µ–ª—Ç—ã–π
            '=': '#00ff00',  # –ó–µ–ª–µ–Ω—ã–π
            '√ó': '#ff8000',  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            '√∑': '#ffff00',  # –ñ–µ–ª—Ç—ã–π
            '^': '#ff00ff',  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
            '‚àö': '#00ff80',  # –ó–µ–ª–µ–Ω–æ-–≥–æ–ª—É–±–æ–π
            'sin': '#ff80ff',  # –°–≤–µ—Ç–ª–æ-–ø—É—Ä–ø—É—Ä–Ω—ã–π
            'cos': '#80ffff',  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
            'tan': '#ffff80',  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π
            'log': '#80ff80',  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
            'ln': '#ff8080',  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
            'x¬≤': '#ff4080',  # –†–æ–∑–æ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
            'x¬≥': '#ff8040',  # –û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
            'x!': '#40ff80',  # –ó–µ–ª–µ–Ω–æ-–≥–æ–ª—É–±–æ–π
            '1/x': '#8040ff',  # –§–∏–æ–ª–µ—Ç–æ–≤–æ-—Å–∏–Ω–∏–π
            '10^x': '#ff8040',  # –û—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
            'e^x': '#40ff40',  # –ó–µ–ª–µ–Ω—ã–π
            '|x|': '#ff4040',  # –ö—Ä–∞—Å–Ω—ã–π
            '2^x': '#4040ff',  # –°–∏–Ω–∏–π
            '‚àõ': '#80ff40',  # –ñ–µ–ª—Ç–æ-–∑–µ–ª–µ–Ω—ã–π
            'n!': '#ff40ff',  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
            'rand': '#40ffff',  # –ì–æ–ª—É–±–æ–π
            '!': '#ff8080',  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
        }
        
        formatted_text = ""
        i = 0
        while i < len(text):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–≥–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            found_function = False
            for func in ['x¬≤', 'x¬≥', 'x!', '1/x', '10^x', 'e^x', '|x|', '2^x', '‚àõ', 'n!', 'rand', 'sin', 'cos', 'tan', 'log', 'ln', 'sqrt']:
                if text[i:i+len(func)] == func:
                    color = operator_colors.get(func, '#ffffff')
                    formatted_text += f'<span style="color: {color};">{func}</span>'
                    i += len(func)
                    found_function = True
                    break
            
            if not found_function:
                char = text[i]
                if char in rainbow_colors:
                    color = rainbow_colors[char]
                    formatted_text += f'<span style="color: {color};">{char}</span>'
                elif char in operator_colors:
                    color = operator_colors[char]
                    formatted_text += f'<span style="color: {color};">{char}</span>'
                else:
                    formatted_text += char
                i += 1
        
        return formatted_text

    # ===== –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –≤–∫–ª–∞–¥–∫–∏ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞) =====
    def _to_int(self, value_text, base_name):
        bases = {"BIN":2, "OCT":8, "DEC":10, "HEX":16}
        base = bases[base_name]
        text = value_text.strip()
        if base_name == "HEX" and text.upper().startswith("0X"):
            text = text[2:]
        return int(text, base)

    def _from_int_all(self, value_int):
        return (
            bin(value_int)[2:],
            oct(value_int)[2:],
            str(value_int),
            hex(value_int)[2:].upper(),
        )

    def prog_convert(self):
        try:
            value = self._to_int(self.prog_input.text(), self.prog_base.currentText())
            b, o, d, h = self._from_int_all(value)
            self.out_bin.setText(b)
            self.out_oct.setText(o)
            self.out_dec.setText(d)
            self.out_hex.setText(h)
        except Exception as e:
            self.show_error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ: {str(e)}")

    def prog_logic(self, op):
        try:
            a = self._to_int(self.op_a.text(), self.op_base.currentText()) if self.op_a.text() else 0
            b = self._to_int(self.op_b.text(), self.op_base.currentText()) if self.op_b.text() else 0
            if op == "AND":
                r = a & b
            elif op == "OR":
                r = a | b
            elif op == "XOR":
                r = a ^ b
            elif op == "NOT":
                r = ~a & ((1 << max(a.bit_length(), 1)) - 1)
            else:
                return
            # –≤—ã–≤–æ–¥–∏–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
            bases = {"BIN": bin, "OCT": oct, "DEC": lambda x: str(x), "HEX": lambda x: hex(x).upper()}
            fmt = bases[self.op_base.currentText()]
            out = fmt(r)
            if out.startswith("0B") or out.startswith("0O") or out.startswith("0X"):
                out = out[2:]
            self.op_result.setText(out)
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {str(e)}")

    def prog_shift(self, direction):
        try:
            val = self._to_int(self.shift_input.text(), self.shift_base.currentText())
            bits = int(self.shift_bits.text())
            if direction == "LEFT":
                val = val << bits
            else:
                val = val >> bits
            self.shift_bin.setText(bin(val)[2:])
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ —Å–¥–≤–∏–≥–∞: {str(e)}")

    def prog_color_convert(self):
        try:
            text = self.color_hex.text().strip()
            if text.startswith('#'):
                text = text[1:]
            if len(text) != 6:
                raise ValueError("HEX –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞ #RRGGBB")
            r = int(text[0:2], 16); g = int(text[2:4], 16); b = int(text[4:6], 16)
            self.color_rgb.setText(f"{r}, {g}, {b}")
            # HSL
            import colorsys
            h, l, s = colorsys.rgb_to_hls(r/255, g/255, b/255)
            self.color_hsl.setText(f"{int(h*360)}¬∞, {int(s*100)}%, {int(l*100)}%")
            # CMYK
            if (r, g, b) == (0, 0, 0):
                c = m = y = 0; k = 100
            else:
                c = 1 - r/255; m = 1 - g/255; y = 1 - b/255
                k = min(c, m, y)
                c = int((c - k) / (1 - k) * 100)
                m = int((m - k) / (1 - k) * 100)
                y = int((y - k) / (1 - k) * 100)
                k = int(k * 100)
            self.color_cmyk.setText(f"C{c} M{m} Y{y} K{k}")
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞: {str(e)}")

    def prog_unix_convert(self, mode):
        try:
            from datetime import datetime
            if mode == "to_date":
                ts = int(float(self.unix_input.text()))
                dt = datetime.fromtimestamp(ts)
                self.unix_result.setText(dt.strftime("%Y-%m-%d %H:%M:%S"))
            else:
                dt = datetime.strptime(self.unix_input.text().strip(), "%Y-%m-%d %H:%M:%S")
                self.unix_result.setText(str(int(dt.timestamp())))
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")

    def prog_generate_password(self):
        import random, string
        try:
            length = int(self.pass_len.text()) if self.pass_len.text() else 12
            chars = self.pass_chars.text() or (string.ascii_letters + string.digits + "!@#$%^&*()")
            if self.pass_exclude_similar.isChecked():
                for ch in "O0Il1":
                    chars = chars.replace(ch, "")
            if not chars:
                raise ValueError("–ù–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –ø—É—Å—Ç")
            self.pass_result.setText(''.join(random.choice(chars) for _ in range(length)))
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")

    # ===== –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–∑–∞–≥–æ—Ç–æ–≤–∫–∞) =====
    def plot_graph(self):
        try:
            import math
            import numpy as np
            from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
            from matplotlib.figure import Figure

            expr = self.graph_expr.text().strip() or "sin(x)/x"

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
            fig = Figure(figsize=(5, 3), tight_layout=True)
            canvas = FigureCanvas(fig)
            ax = fig.add_subplot(111)

            xs = np.linspace(-10, 10, 1000)
            safe = {
                'sin': np.sin, 'cos': np.cos, 'tan': np.tan,
                'log': np.log10, 'ln': np.log, 'sqrt': np.sqrt,
                'pi': math.pi, 'e': math.e, 'abs': np.abs,
                'exp': np.exp, '__builtins__': {}
            }
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ f(x) = ...
            s = expr
            if '=' in s:
                s = s.split('=', 1)[1]
            s = s.replace('^', '**')
            ys = eval(s, safe, {'x': xs})

            ax.plot(xs, ys, color='#67b7ff')
            ax.axhline(0, color='#888888', linewidth=0.8)
            ax.axvline(0, color='#888888', linewidth=0.8)
            ax.grid(True, alpha=0.3)
            ax.set_title(f"f(x) = {expr}")

            # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å layout –Ω–µ –±—É–¥–µ–º)
            while self.graph_canvas_layout.count():
                item = self.graph_canvas_layout.takeAt(0)
                if item.widget():
                    item.widget().setParent(None)
            self.graph_canvas_layout.addWidget(canvas)
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")

    def create_basic_calculator(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
        widget = QWidget()
        layout = QVBoxLayout()
        widget.setLayout(layout)
        layout.setSpacing(10)
        layout.setContentsMargins(0, 0, 0, 0)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        self.basic_display = self.create_display()
        layout.addWidget(self.basic_display)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        button_layout = QGridLayout()
        layout.addLayout(button_layout)
        button_layout.setSpacing(8)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        basic_buttons = [
            ('AC', 0, 0), ('%', 0, 1), ('‚å´', 0, 2), ('√∑', 0, 3),
            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('√ó', 1, 3),
            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('-', 2, 3),
            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('+', 3, 3),
            ('¬±', 4, 0), ('0', 4, 1), ('.', 4, 2), ('=', 4, 3),
            ('–ü–æ–º–æ—â—å', 5, 0, 1, 4),  # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        ]

        for button_data in basic_buttons:
            if len(button_data) == 5:  # –ö–Ω–æ–ø–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                text, row, col, rowspan, colspan = button_data
                btn = self.create_calculator_button(text)
                button_layout.addWidget(btn, row, col, rowspan, colspan)
            else:  # –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                text, row, col = button_data
                btn = self.create_calculator_button(text)
                button_layout.addWidget(btn, row, col)

        return widget

    def create_scientific_calculator(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—É—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º"""
        widget = QWidget()
        layout = QVBoxLayout()
        widget.setLayout(layout)
        layout.setSpacing(10)
        layout.setContentsMargins(0, 0, 0, 0)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–ª–µ–π –¥–ª—è –Ω–∞—É—á–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        self.scientific_display = self.create_display()
        layout.addWidget(self.scientific_display)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏
        button_layout = QGridLayout()
        layout.addLayout(button_layout)
        button_layout.setSpacing(6)

        # –ö–∞–Ω–æ–Ω–∏—á–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –Ω–∞—É—á–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ
        scientific_buttons = [
            # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
            ('AC', 0, 0), ('C', 0, 1), ('‚å´', 0, 2), ('œÄ', 0, 3), ('e', 0, 4), ('√∑', 0, 5), ('√ó', 0, 6), ('-', 0, 7), ('+', 0, 8),
            # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ü–∏—Ñ—Ä—ã 7,8,9
            ('sin', 1, 0), ('cos', 1, 1), ('tan', 1, 2), ('log', 1, 3), ('ln', 1, 4), ('7', 1, 5), ('8', 1, 6), ('9', 1, 7), ('%', 1, 8),
            # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - —Å—Ç–µ–ø–µ–Ω–∏, –∫–æ—Ä–Ω–∏, —Å–∫–æ–±–∫–∏ –∏ —Ü–∏—Ñ—Ä—ã 4,5,6
            ('x¬≤', 2, 0), ('x^y', 2, 1), ('‚àö', 2, 2), ('(', 2, 3), (')', 2, 4), ('4', 2, 5), ('5', 2, 6), ('6', 2, 7), ('=', 2, 8, 1, 2),
            # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ü–∏—Ñ—Ä—ã 1,2,3
            ('x!', 3, 0), ('1/x', 3, 1), ('10^x', 3, 2), ('e^x', 3, 3), ('|x|', 3, 4), ('1', 3, 5), ('2', 3, 6), ('3', 3, 7), ('', 3, 8),
            # –ü—è—Ç—ã–π —Ä—è–¥ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ü–∏—Ñ—Ä—ã 0, —Ç–æ—á–∫–∞, –∑–Ω–∞–∫
            ('2^x', 4, 0), ('x¬≥', 4, 1), ('‚àõ', 4, 2), ('n!', 4, 3), ('rand', 4, 4), ('¬±', 4, 5), ('0', 4, 6), ('.', 4, 7), ('', 4, 8),
            # –®–µ—Å—Ç–æ–π —Ä—è–¥ - –∫–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
            ('–ü–æ–º–æ—â—å', 5, 0, 1, 9),  # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        ]

        for button_data in scientific_buttons:
            if len(button_data) == 5:  # –ö–Ω–æ–ø–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                text, row, col, rowspan, colspan = button_data
                btn = self.create_calculator_button(text)
                button_layout.addWidget(btn, row, col, rowspan, colspan)
            else:  # –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                text, row, col = button_data
                if text:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
                    btn = self.create_calculator_button(text)
                    button_layout.addWidget(btn, row, col)

        return widget

    def create_notes_window(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ –∑–∞–º–µ—Ç–æ–∫: —Å–ø–∏—Å–æ–∫ + —Ä–µ–¥–∞–∫—Ç–æ—Ä. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        widget = QWidget()
        layout = QHBoxLayout(); widget.setLayout(layout)
        layout.setContentsMargins(6,6,6,6)

        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
        left = QVBoxLayout(); layout.addLayout(left, 1)
        header = QLabel("üìù –ó–∞–º–µ—Ç–∫–∏"); header.setFont(QFont('Arial', 14, QFont.Bold)); header.setAlignment(Qt.AlignCenter)
        left.addWidget(header)

        self.notes_list_widget = QListWidget()
        self.notes_list_widget.itemClicked.connect(self.on_note_selected)
        left.addWidget(self.notes_list_widget, 1)

        left_buttons = QHBoxLayout(); left.addLayout(left_buttons)
        add_btn = AnimatedButton("‚ûï –°–æ–∑–¥–∞—Ç—å"); add_btn.setStyleSheet(self.styles.get_help_button_style())
        add_btn.clicked.connect(self.create_new_note)
        del_btn = AnimatedButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"); del_btn.setStyleSheet(self.styles.get_back_button_style())
        del_btn.clicked.connect(self.delete_selected_note)
        left_buttons.addWidget(add_btn); left_buttons.addWidget(del_btn)

        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —Ä–µ–¥–∞–∫—Ç–æ—Ä
        right = QVBoxLayout(); layout.addLayout(right, 2)
        self.note_title = QLineEdit(); self.note_title.setPlaceholderText("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏")
        self.note_editor = QTextEdit(); self.note_editor.setPlaceholderText("–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏...")
        save_btn = AnimatedButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"); save_btn.setStyleSheet(self.styles.get_financial_button_style())
        save_btn.clicked.connect(self.save_current_note)
        right.addWidget(self.note_title); right.addWidget(self.note_editor, 1); right.addWidget(save_btn)

        # –î–∞–Ω–Ω—ã–µ
        self.notes = []  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {id,title,content}
        self.note_counter = 1
        self.current_note_id = None

        return widget

    def create_financial_calculator(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"""
        widget = QWidget()
        layout = QVBoxLayout()
        widget.setLayout(layout)
        layout.setSpacing(10)
        layout.setContentsMargins(0, 0, 0, 0)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
        title_label.setFont(QFont('Arial', 16, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)

        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        self.financial_tabs = QTabWidget()
        layout.addWidget(self.financial_tabs)

        # –í–∫–ª–∞–¥–∫–∞ –≤–∞–ª—é—Ç
        currency_tab = self.create_currency_tab()
        self.financial_tabs.addTab(currency_tab, "üí± –í–∞–ª—é—Ç—ã")

        # –í–∫–ª–∞–¥–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
        credit_tab = self.create_credit_tab()
        self.financial_tabs.addTab(credit_tab, "üè¶ –ö—Ä–µ–¥–∏—Ç—ã")

        # –í–∫–ª–∞–¥–∫–∞ –∏–ø–æ—Ç–µ–∫–∏
        mortgage_tab = self.create_mortgage_tab()
        self.financial_tabs.addTab(mortgage_tab, "üè† –ò–ø–æ—Ç–µ–∫–∞")

        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
        savings_tab = self.create_savings_tab()
        self.financial_tabs.addTab(savings_tab, "üíé –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è")

        return widget

    def create_currency_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –≤–∞–ª—é—Ç"""
        widget = QWidget()
        layout = QVBoxLayout()
        widget.setLayout(layout)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç")
        title.setFont(QFont('Arial', 14, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö
        self.currency_info = QLabel("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...")
        self.currency_info.setFont(QFont('Arial', 10))
        self.currency_info.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.currency_info)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        input_layout = QGridLayout()
        
        # –°—É–º–º–∞
        input_layout.addWidget(QLabel("–°—É–º–º–∞:"), 0, 0)
        self.amount_input = QLineEdit()
        self.amount_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
        input_layout.addWidget(self.amount_input, 0, 1)

        # –ò–∑ –≤–∞–ª—é—Ç—ã
        input_layout.addWidget(QLabel("–ò–∑ –≤–∞–ª—é—Ç—ã:"), 1, 0)
        self.from_currency = QComboBox()
        self.from_currency.setEditable(True)
        # –í–∞–ª—é—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ API –ë–µ–ª–∞—Ä—É—Å–±–∞–Ω–∫–∞
        self.from_currency.addItems(["BYN", "USD", "EUR", "RUB", "UAH", "PLN", "GBP", "CHF", "JPY", "CNY", "CAD", "AUD", "SEK", "NOK", "DKK", "CZK", "HUF", "BGN", "RON", "HRK", "RSD", "BAM", "MKD", "ALL", "ISK", "MDL", "UZS", "KZT", "KGS", "TJS", "AMD", "AZN", "GEL", "TRY", "ILS", "AED", "SAR", "QAR", "KWD", "BHD", "OMR", "JOD", "LBP", "EGP", "MAD", "TND", "DZD", "ZAR", "NGN", "KES", "UGX", "TZS", "ETB", "GHS", "XOF", "XAF", "CDF", "AOA", "MZN", "BWP", "SZL", "LSL", "NAD", "ZMW", "MWK", "BIF", "RWF", "DJF", "SOS", "KMF", "MUR", "SCR", "MVR", "LKR", "BDT", "NPR", "PKR", "AFN", "IRR", "IQD", "SYP", "YER", "INR", "IDR", "MYR", "SGD", "THB", "VND", "PHP", "KRW", "TWD", "HKD", "MOP", "BND", "LAK", "KHR", "MMK", "MNT", "NPR", "BTN", "LKR", "MVR", "SCR", "MUR", "KMF", "SOS", "DJF", "RWF", "BIF", "MWK", "ZMW", "NAD", "LSL", "SZL", "BWP", "MZN", "AOA", "CDF", "XAF", "XOF", "GHS", "ETB", "TZS", "UGX", "KES", "NGN", "ZAR", "DZD", "TND", "MAD", "EGP", "LBP", "JOD", "OMR", "BHD", "KWD", "QAR", "SAR", "AED", "ILS", "TRY", "GEL", "AZN", "AMD", "TJS", "KGS", "KZT", "UZS", "MDL", "ISK", "ALL", "MKD", "BAM", "RSD", "HRK", "RON", "BGN", "HUF", "CZK", "DKK", "NOK", "SEK", "AUD", "CAD", "CNY", "JPY", "CHF", "GBP", "PLN", "UAH", "RUB", "EUR", "USD"])
        self.from_currency.setCurrentText("USD")
        input_layout.addWidget(self.from_currency, 1, 1)

        # –í –≤–∞–ª—é—Ç—É
        input_layout.addWidget(QLabel("–í –≤–∞–ª—é—Ç—É:"), 2, 0)
        self.to_currency = QComboBox()
        self.to_currency.setEditable(True)
        # –í–∞–ª—é—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ API –ë–µ–ª–∞—Ä—É—Å–±–∞–Ω–∫–∞
        self.to_currency.addItems(["BYN", "USD", "EUR", "RUB", "UAH", "PLN", "GBP", "CHF", "JPY", "CNY", "CAD", "AUD", "SEK", "NOK", "DKK", "CZK", "HUF", "BGN", "RON", "HRK", "RSD", "BAM", "MKD", "ALL", "ISK", "MDL", "UZS", "KZT", "KGS", "TJS", "AMD", "AZN", "GEL", "TRY", "ILS", "AED", "SAR", "QAR", "KWD", "BHD", "OMR", "JOD", "LBP", "EGP", "MAD", "TND", "DZD", "ZAR", "NGN", "KES", "UGX", "TZS", "ETB", "GHS", "XOF", "XAF", "CDF", "AOA", "MZN", "BWP", "SZL", "LSL", "NAD", "ZMW", "MWK", "BIF", "RWF", "DJF", "SOS", "KMF", "MUR", "SCR", "MVR", "LKR", "BDT", "NPR", "PKR", "AFN", "IRR", "IQD", "SYP", "YER", "INR", "IDR", "MYR", "SGD", "THB", "VND", "PHP", "KRW", "TWD", "HKD", "MOP", "BND", "LAK", "KHR", "MMK", "MNT", "NPR", "BTN", "LKR", "MVR", "SCR", "MUR", "KMF", "SOS", "DJF", "RWF", "BIF", "MWK", "ZMW", "NAD", "LSL", "SZL", "BWP", "MZN", "AOA", "CDF", "XAF", "XOF", "GHS", "ETB", "TZS", "UGX", "KES", "NGN", "ZAR", "DZD", "TND", "MAD", "EGP", "LBP", "JOD", "OMR", "BHD", "KWD", "QAR", "SAR", "AED", "ILS", "TRY", "GEL", "AZN", "AMD", "TJS", "KGS", "KZT", "UZS", "MDL", "ISK", "ALL", "MKD", "BAM", "RSD", "HRK", "RON", "BGN", "HUF", "CZK", "DKK", "NOK", "SEK", "AUD", "CAD", "CNY", "JPY", "CHF", "GBP", "PLN", "UAH", "RUB", "EUR", "USD"])
        self.to_currency.setCurrentText("EUR")
        input_layout.addWidget(self.to_currency, 2, 1)

        layout.addLayout(input_layout)

        # –ö–Ω–æ–ø–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        button_layout = QHBoxLayout()
        convert_btn = AnimatedButton("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")
        convert_btn.clicked.connect(self.convert_currency)
        convert_btn.setStyleSheet(self.styles.get_currency_button_style())
        refresh_btn = AnimatedButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã")
        refresh_btn.clicked.connect(self.refresh_currency_rates)
        refresh_btn.setStyleSheet(self.styles.get_financial_button_style())
        button_layout.addWidget(convert_btn)
        button_layout.addWidget(refresh_btn)
        layout.addLayout(button_layout)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.currency_result = QLabel("")
        self.currency_result.setFont(QFont('Arial', 12, QFont.Bold))
        self.currency_result.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.currency_result)

        return widget

    def create_credit_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
        widget = QWidget()
        layout = QVBoxLayout()
        widget.setLayout(layout)

        title = QLabel("üè¶ –†–∞—Å—á–µ—Ç –∫—Ä–µ–¥–∏—Ç–∞")
        title.setFont(QFont('Arial', 14, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        input_layout = QGridLayout()
        
        input_layout.addWidget(QLabel("–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:"), 0, 0)
        self.credit_amount = QLineEdit()
        self.credit_amount.setPlaceholderText("100000")
        input_layout.addWidget(self.credit_amount, 0, 1)

        input_layout.addWidget(QLabel("–í–∞–ª—é—Ç–∞:"), 1, 0)
        self.credit_currency = QComboBox()
        self.credit_currency.addItems(["BYN", "USD", "EUR", "CNY"])
        self.credit_currency.setCurrentText("BYN")
        input_layout.addWidget(self.credit_currency, 1, 1)

        input_layout.addWidget(QLabel("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%):"), 2, 0)
        self.credit_rate = QLineEdit()
        self.credit_rate.setPlaceholderText("12")
        input_layout.addWidget(self.credit_rate, 2, 1)

        input_layout.addWidget(QLabel("–°—Ä–æ–∫ (–º–µ—Å—è—Ü–µ–≤):"), 3, 0)
        self.credit_term = QLineEdit()
        self.credit_term.setPlaceholderText("36")
        input_layout.addWidget(self.credit_term, 3, 1)

        layout.addLayout(input_layout)

        # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
        calculate_btn = AnimatedButton("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å")
        calculate_btn.clicked.connect(self.calculate_credit)
        calculate_btn.setStyleSheet(self.styles.get_financial_button_style())
        layout.addWidget(calculate_btn)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.credit_result = QLabel("")
        self.credit_result.setFont(QFont('Arial', 10))
        layout.addWidget(self.credit_result)

        return widget

    def create_mortgage_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Ä–∞—Å—á–µ—Ç–∞ –∏–ø–æ—Ç–µ–∫–∏"""
        widget = QWidget()
        layout = QVBoxLayout()
        widget.setLayout(layout)

        title = QLabel("üè† –†–∞—Å—á–µ—Ç –∏–ø–æ—Ç–µ–∫–∏")
        title.setFont(QFont('Arial', 14, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        input_layout = QGridLayout()
        
        input_layout.addWidget(QLabel("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:"), 0, 0)
        self.mortgage_amount = QLineEdit()
        self.mortgage_amount.setPlaceholderText("5000000")
        input_layout.addWidget(self.mortgage_amount, 0, 1)

        input_layout.addWidget(QLabel("–í–∞–ª—é—Ç–∞:"), 1, 0)
        self.mortgage_currency = QComboBox()
        self.mortgage_currency.addItems(["BYN", "USD", "EUR", "CNY"])
        self.mortgage_currency.setCurrentText("BYN")
        input_layout.addWidget(self.mortgage_currency, 1, 1)

        input_layout.addWidget(QLabel("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å:"), 2, 0)
        self.mortgage_down = QLineEdit()
        self.mortgage_down.setPlaceholderText("1000000")
        input_layout.addWidget(self.mortgage_down, 2, 1)

        input_layout.addWidget(QLabel("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%):"), 3, 0)
        self.mortgage_rate = QLineEdit()
        self.mortgage_rate.setPlaceholderText("8")
        input_layout.addWidget(self.mortgage_rate, 3, 1)

        input_layout.addWidget(QLabel("–°—Ä–æ–∫ (–ª–µ—Ç):"), 4, 0)
        self.mortgage_term = QLineEdit()
        self.mortgage_term.setPlaceholderText("20")
        input_layout.addWidget(self.mortgage_term, 4, 1)

        layout.addLayout(input_layout)

        # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
        calculate_btn = AnimatedButton("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å")
        calculate_btn.clicked.connect(self.calculate_mortgage)
        calculate_btn.setStyleSheet(self.styles.get_financial_button_style())
        layout.addWidget(calculate_btn)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.mortgage_result = QLabel("")
        self.mortgage_result.setFont(QFont('Arial', 10))
        layout.addWidget(self.mortgage_result)

        return widget

    def create_savings_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"""
        widget = QWidget()
        layout = QVBoxLayout()
        widget.setLayout(layout)

        title = QLabel("üíé –†–∞—Å—á–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π")
        title.setFont(QFont('Arial', 14, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        input_layout = QGridLayout()
        
        input_layout.addWidget(QLabel("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å:"), 0, 0)
        self.savings_monthly = QLineEdit()
        self.savings_monthly.setPlaceholderText("10000")
        input_layout.addWidget(self.savings_monthly, 0, 1)

        input_layout.addWidget(QLabel("–í–∞–ª—é—Ç–∞:"), 1, 0)
        self.savings_currency = QComboBox()
        self.savings_currency.addItems(["BYN", "USD", "EUR", "CNY"])
        self.savings_currency.setCurrentText("BYN")
        input_layout.addWidget(self.savings_currency, 1, 1)

        input_layout.addWidget(QLabel("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%):"), 2, 0)
        self.savings_rate = QLineEdit()
        self.savings_rate.setPlaceholderText("6")
        input_layout.addWidget(self.savings_rate, 2, 1)

        input_layout.addWidget(QLabel("–°—Ä–æ–∫ (–ª–µ—Ç):"), 3, 0)
        self.savings_term = QLineEdit()
        self.savings_term.setPlaceholderText("10")
        input_layout.addWidget(self.savings_term, 3, 1)

        layout.addLayout(input_layout)

        # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
        calculate_btn = AnimatedButton("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å")
        calculate_btn.clicked.connect(self.calculate_savings)
        calculate_btn.setStyleSheet(self.styles.get_financial_button_style())
        layout.addWidget(calculate_btn)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        self.savings_result = QLabel("")
        self.savings_result.setFont(QFont('Arial', 10))
        layout.addWidget(self.savings_result)

        return widget

    def create_basic_screen(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        widget = QWidget()
        layout = QGridLayout()
        widget.setLayout(layout)
        layout.setSpacing(8)
        layout.setContentsMargins(0, 0, 0, 0)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        basic_buttons = [
            ('AC', 0, 0), ('%', 0, 1), ('‚â°', 0, 2), ('√∑', 0, 3),
            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('√ó', 1, 3),
            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('-', 2, 3),
            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('+', 3, 3),
            ('¬±', 4, 0), ('0', 4, 1), ('.', 4, 2), ('=', 4, 3),
            ('–ü–æ–º–æ—â—å', 5, 0, 1, 4),  # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        ]

        for button_data in basic_buttons:
            if len(button_data) == 5:  # –ö–Ω–æ–ø–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                text, row, col, rowspan, colspan = button_data
                btn = self.create_calculator_button(text)
                layout.addWidget(btn, row, col, rowspan, colspan)
            else:  # –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
                text, row, col = button_data
            btn = self.create_calculator_button(text)
            layout.addWidget(btn, row, col)

        return widget

    def create_advanced_screen(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        widget = QWidget()
        layout = QGridLayout()
        widget.setLayout(layout)
        layout.setSpacing(8)
        layout.setContentsMargins(0, 0, 0, 0)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        advanced_buttons = [
            ('œÄ', 0, 0), ('e', 0, 1), ('(', 0, 2), (')', 0, 3),
            ('sin', 1, 0), ('cos', 1, 1), ('tan', 1, 2), ('‚àö', 1, 3),
            ('x¬≤', 2, 0), ('x^y', 2, 1), ('log', 2, 2), ('ln', 2, 3),
            ('‚å´', 3, 0), ('C', 3, 1), ('', 3, 2), ('–ù–∞–∑–∞–¥', 3, 3),
        ]

        for text, row, col in advanced_buttons:
            if text:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏
                btn = self.create_calculator_button(text)
                layout.addWidget(btn, row, col)

        return widget

    def create_calculator_button(self, text):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –∑–≤—É–∫–æ–º"""
        btn = AnimatedButton(text)
        btn.setFont(QFont('Arial', 16))
        btn.setMinimumSize(60, 60)
        btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        if text not in ['‚â°', '–ù–∞–∑–∞–¥', '–ü–æ–º–æ—â—å']:
            btn.clicked.connect(lambda: self.on_button_click(text))
        elif text == '‚â°':
            btn.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(1))
        elif text == '–ù–∞–∑–∞–¥':
            btn.clicked.connect(lambda: self.stacked_widget.setCurrentIndex(0))
        elif text == '–ü–æ–º–æ—â—å':
            btn.clicked.connect(self.show_step_by_step_help)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.apply_button_style(btn, text)

        return btn

    def apply_button_style(self, btn, text):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª—å –∫ –∫–Ω–æ–ø–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–µ —Ç–∏–ø–∞"""
        if text in ['√∑', '√ó', '-', '+', '=']:
            btn.setStyleSheet(self.styles.get_operator_style())
        elif text in ['AC', 'C', '‚å´', '¬±', '%']:
            btn.setStyleSheet(self.styles.get_function_style())
        elif text == '–ù–∞–∑–∞–¥':
            btn.setStyleSheet(self.styles.get_back_button_style())
        elif text == '‚â°':
            btn.setStyleSheet(self.styles.get_more_button_style())
        elif text == '–ü–æ–º–æ—â—å':
            btn.setStyleSheet(self.styles.get_help_button_style())
        else:
            btn.setStyleSheet(self.styles.get_number_style())

    def apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        self.setStyleSheet(self.styles.get_main_style())
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –¥–∏—Å–ø–ª–µ—è–º
        self.basic_display.setStyleSheet(self.styles.get_display_style())
        self.scientific_display.setStyleSheet(self.styles.get_display_style())

    def play_button_sound(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
        try:
            self.sound_effect.play()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞

    def on_button_click(self, text):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
        self.play_button_sound()

        try:
            if self.result_displayed and text not in ['C', '‚å´', '¬±', '%']:
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –∏ –Ω–∞–∂–∞—Ç–∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞,
                # –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if self.last_result is not None and text not in ['+', '-', '√ó', '√∑']:
                    self.current_input = str(self.last_result)
                    formatted_text = self.format_text_with_rainbow_colors(self.current_input)
                    current_tab = self.tab_widget.currentIndex()
                    if current_tab == 0:
                        self.basic_display.setHtml(formatted_text)
                    elif current_tab == 1:
                        self.scientific_display.setHtml(formatted_text)
                    self.result_displayed = False

            if text == '=':
                self.calculate_result()
            elif text == 'AC' or text == 'C':
                self.clear_display()
            elif text == '‚å´':
                self.backspace()
            elif text == '¬±':
                self.toggle_sign()
            elif text == '%':
                self.calculate_percentage()
            elif text == '√∑':
                self.add_character('/')
            elif text == '√ó':
                self.add_character('*')
            else:
                self.add_character(text)

        except Exception as e:
            self.show_error(str(e))

    def calculate_result(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        if self.current_input:
            try:
                result = self.calculator_engine.safe_eval(self.current_input)
                formatted_result = self.format_text_with_rainbow_colors(str(result))
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–∏—Å–ø–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                current_tab = self.tab_widget.currentIndex()
                if current_tab == 0:  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
                    self.basic_display.setHtml(formatted_result)
                elif current_tab == 1:  # –ù–∞—É—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
                    self.scientific_display.setHtml(formatted_result)
                self.current_input = str(result)
                self.last_result = result
                self.result_displayed = True
            except Exception as e:
                self.show_error(str(e))

    def calculate_percentage(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç"""
        if self.current_input:
            try:
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª - –æ–ø–µ—Ä–∞—Ç–æ—Ä, –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if self.current_input and self.current_input[-1] in ['+', '-', '*', '/']:
                    if self.last_result is not None:
                        percent_value = self.last_result * 0.01
                        self.current_input += str(percent_value)
                        formatted_text = self.format_text_with_rainbow_colors(self.current_input)
                        current_tab = self.tab_widget.currentIndex()
                        if current_tab == 0:
                            self.basic_display.setHtml(formatted_text)
                        elif current_tab == 1:
                            self.scientific_display.setHtml(formatted_text)
                else:
                    # –ò–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞
                    value = float(self.current_input) * 0.01
                    self.current_input = str(value)
                    formatted_text = self.format_text_with_rainbow_colors(self.current_input)
                    current_tab = self.tab_widget.currentIndex()
                    if current_tab == 0:
                        self.basic_display.setHtml(formatted_text)
                    elif current_tab == 1:
                        self.scientific_display.setHtml(formatted_text)
                self.result_displayed = False
            except:
                self.show_error("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞")

    def clear_display(self):
        """–û—á–∏—â–∞–µ—Ç –¥–∏—Å–ø–ª–µ–π"""
        self.current_input = ""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–∏—Å–ø–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        current_tab = self.tab_widget.currentIndex()
        if current_tab == 0:  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            self.basic_display.clear()
        elif current_tab == 1:  # –ù–∞—É—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            self.scientific_display.clear()
        self.result_displayed = False
        self.last_result = None

    def backspace(self):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª"""
        self.current_input = self.current_input[:-1]
        formatted_text = self.format_text_with_rainbow_colors(self.current_input)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–∏—Å–ø–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        current_tab = self.tab_widget.currentIndex()
        if current_tab == 0:  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            self.basic_display.setHtml(formatted_text)
        elif current_tab == 1:  # –ù–∞—É—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            self.scientific_display.setHtml(formatted_text)
        self.result_displayed = False

    def toggle_sign(self):
        """–ú–µ–Ω—è–µ—Ç –∑–Ω–∞–∫ —á–∏—Å–ª–∞"""
        if self.current_input:
            try:
                if self.current_input[0] == '-':
                    self.current_input = self.current_input[1:]
                else:
                    self.current_input = '-' + self.current_input
                formatted_text = self.format_text_with_rainbow_colors(self.current_input)
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–∏—Å–ø–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                current_tab = self.tab_widget.currentIndex()
                if current_tab == 0:  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
                    self.basic_display.setHtml(formatted_text)
                elif current_tab == 1:  # –ù–∞—É—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
                    self.scientific_display.setHtml(formatted_text)
            except:
                pass
        self.result_displayed = False

    def add_character(self, char):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–º–≤–æ–ª –≤ —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥"""
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –∏ –º—ã –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ, –æ—á–∏—â–∞–µ–º –¥–∏—Å–ø–ª–µ–π
        if self.result_displayed and char not in ['+', '-', '*', '/', '√ó', '√∑']:
            self.current_input = ""
            self.result_displayed = False

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–±–∫–∏
        if char in ['sin', 'cos', 'tan', 'log', 'ln', 'sqrt']:
            self.current_input += char + '('
        elif char == 'x¬≤':
            # –î–ª—è x¬≤ –¥–æ–±–∞–≤–ª—è–µ–º **2 –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —á–∏—Å–ª—É
            if self.current_input and self.current_input[-1].isdigit():
                self.current_input += '**2'
            else:
                self.current_input += '**2'
        elif char == 'x^y':
            # –î–ª—è x^y –¥–æ–±–∞–≤–ª—è–µ–º **
            self.current_input += '**'
        elif char == '‚àö':
            # –î–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è –¥–æ–±–∞–≤–ª—è–µ–º sqrt(
            self.current_input += 'sqrt('
        elif char == 'x!':
            # –§–∞–∫—Ç–æ—Ä–∏–∞–ª
            if self.current_input and self.current_input[-1].isdigit():
                self.current_input += '!'
            else:
                self.current_input += '!'
        elif char == '1/x':
            # –û–±—Ä–∞—Ç–Ω–æ–µ —á–∏—Å–ª–æ
            self.current_input += '1/('
        elif char == '10^x':
            # 10 –≤ —Å—Ç–µ–ø–µ–Ω–∏ x
            self.current_input += '10**('
        elif char == 'e^x':
            # e –≤ —Å—Ç–µ–ø–µ–Ω–∏ x
            self.current_input += 'exp('
        elif char == '|x|':
            # –ú–æ–¥—É–ª—å —á–∏—Å–ª–∞
            self.current_input += 'abs('
        elif char == '2^x':
            # 2 –≤ —Å—Ç–µ–ø–µ–Ω–∏ x
            self.current_input += '2**('
        elif char == 'x¬≥':
            # x –≤ –∫—É–±–µ
            if self.current_input and self.current_input[-1].isdigit():
                self.current_input += '**3'
            else:
                self.current_input += '**3'
        elif char == '‚àõ':
            # –ö—É–±–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å
            self.current_input += 'cbrt('
        elif char == 'n!':
            # –§–∞–∫—Ç–æ—Ä–∏–∞–ª n
            self.current_input += 'factorial('
        elif char == 'rand':
            # –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1
            import random
            self.current_input += str(random.random())
        else:
            self.current_input += char
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–∞–¥—É–∂–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
        formatted_text = self.format_text_with_rainbow_colors(self.current_input)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¥–∏—Å–ø–ª–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        current_tab = self.tab_widget.currentIndex()
        if current_tab == 0:  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            self.basic_display.setHtml(formatted_text)
        elif current_tab == 1:  # –ù–∞—É—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            self.scientific_display.setHtml(formatted_text)
        self.result_displayed = False

    def show_error(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        msg_box = QMessageBox(self)
        msg_box.setWindowTitle("–û—à–∏–±–∫–∞")
        msg_box.setText(message)
        msg_box.setIcon(QMessageBox.Warning)
        msg_box.setStyleSheet(self.styles.get_main_style())
        msg_box.exec_()
        self.clear_display()

    def show_step_by_step_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.current_input.strip():
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–ü–æ–º–æ—â—å")
            msg_box.setText("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è!")
            msg_box.setIcon(QMessageBox.Information)
            msg_box.setStyleSheet(self.styles.get_main_style())
            msg_box.exec_()
            return
        
        try:
            result, steps = self.step_solver.solve_step_by_step(self.current_input)
            
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
            help_window = QMessageBox(self)
            help_window.setWindowTitle("–ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ")
            help_window.setIcon(QMessageBox.Information)
            help_window.setStyleSheet(self.styles.get_main_style())
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            explanation_text = "–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:\n\n"
            for step in steps:
                explanation_text += step + "\n"
            
            help_window.setText(explanation_text)
            help_window.setStandardButtons(QMessageBox.Ok)
            help_window.exec_()
            
        except Exception as e:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–û—à–∏–±–∫–∞")
            msg_box.setText(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ: {str(e)}")
            msg_box.setIcon(QMessageBox.Warning)
            msg_box.setStyleSheet(self.styles.get_main_style())
            msg_box.exec_()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
    def create_new_note(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –≤–≤–æ–¥–∞"""
        note_id = self.note_counter
        self.note_counter += 1
        note = {'id': note_id, 'title': f'–ó–∞–º–µ—Ç–∫–∞ {note_id}', 'content': ''}
        self.notes.append(note)
        item = QListWidgetItem(note['title'])
        item.setData(Qt.UserRole, note_id)
        self.notes_list_widget.addItem(item)
        self.notes_list_widget.setCurrentItem(item)
        self.current_note_id = note_id
        self.note_title.setText(note['title'])
        self.note_editor.setPlainText(note['content'])

    def delete_selected_note(self):
        if not self.notes_list_widget.currentItem():
            return
        note_id = self.notes_list_widget.currentItem().data(Qt.UserRole)
        self.notes = [n for n in self.notes if n['id'] != note_id]
        row = self.notes_list_widget.currentRow()
        self.notes_list_widget.takeItem(row)
        self.current_note_id = None
        self.note_title.clear(); self.note_editor.clear()

    def on_note_selected(self, item):
        note_id = item.data(Qt.UserRole)
        self.current_note_id = note_id
        note = next((n for n in self.notes if n['id'] == note_id), None)
        if note:
            self.note_title.setText(note['title'])
            self.note_editor.setPlainText(note['content'])

    def save_current_note(self):
        if self.current_note_id is None:
            return
        note = next((n for n in self.notes if n['id'] == self.current_note_id), None)
        if not note:
            return
        note['title'] = self.note_title.text() or note['title']
        note['content'] = self.note_editor.toPlainText()
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å–ø–∏—Å–∫–µ
        for i in range(self.notes_list_widget.count()):
            it = self.notes_list_widget.item(i)
            if it.data(Qt.UserRole) == note['id']:
                it.setText(note['title'])
                break

    def delete_note(self):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É"""
        if not self.notes:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            msg_box.setText("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            msg_box.setIcon(QMessageBox.Information)
            msg_box.setStyleSheet(self.styles.get_main_style())
            msg_box.exec_()
            return
        
        # –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–º–µ—Ç–∫–∏
        self.notes.pop()
        self.update_notes_display()

    def search_notes(self, search_text):
        """–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        if not search_text:
            self.update_notes_display()
            return
        
        filtered_notes = [note for note in self.notes if search_text.lower() in note['title'].lower()]
        
        display_text = ""
        for note in filtered_notes:
            display_text += note['content']
        
        self.notes_list.setText(display_text)

    def update_notes_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫"""
        display_text = ""
        for note in self.notes:
            display_text += note['content']
        
        self.notes_list.setText(display_text)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    def fetch_currency_rates(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å API –ë–µ–ª–∞—Ä—É—Å–±–∞–Ω–∫–∞"""
        if not REQUESTS_AVAILABLE:
            return False
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—É—Ä—Å—ã (–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å)
            if (self.last_currency_update and 
                datetime.now() - self.last_currency_update < timedelta(hours=1) and 
                self.currency_rates):
                return True
            
            response = requests.get('https://belarusbank.by/api/kursExchange', timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫—É—Ä—Å—ã
            self.currency_rates = {}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ API
            for bank_data in data:
                if 'kurs' in bank_data:
                    for currency in bank_data['kurs']:
                        curr_code = currency.get('cur_code')
                        if curr_code:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å—ã –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏
                            self.currency_rates[curr_code] = {
                                'buy': float(currency.get('cur_scale', 1)) / float(currency.get('cur_rate', 1)),
                                'sell': float(currency.get('cur_scale', 1)) / float(currency.get('cur_rate', 1)),
                                'scale': int(currency.get('cur_scale', 1))
                            }
            
            self.last_currency_update = datetime.now()
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
            return False
    
    def get_currency_rate(self, from_curr, to_curr):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏"""
        if from_curr == to_curr:
            return 1.0
        
        # –ï—Å–ª–∏ requests –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
        if not REQUESTS_AVAILABLE:
            if from_curr in FALLBACK_RATES and to_curr in FALLBACK_RATES[from_curr]:
                return FALLBACK_RATES[from_curr][to_curr]
            elif to_curr in FALLBACK_RATES and from_curr in FALLBACK_RATES[to_curr]:
                return 1.0 / FALLBACK_RATES[to_curr][from_curr]
            else:
                return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not self.fetch_currency_rates():
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã —Å API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if from_curr in FALLBACK_RATES and to_curr in FALLBACK_RATES[from_curr]:
                return FALLBACK_RATES[from_curr][to_curr]
            elif to_curr in FALLBACK_RATES and from_curr in FALLBACK_RATES[to_curr]:
                return 1.0 / FALLBACK_RATES[to_curr][from_curr]
            return None
        
        # –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –≤–∞–ª—é—Ç BYN, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –∫—É—Ä—Å—ã
        if from_curr == 'BYN' and to_curr in self.currency_rates:
            return self.currency_rates[to_curr]['buy']
        elif to_curr == 'BYN' and from_curr in self.currency_rates:
            return 1.0 / self.currency_rates[from_curr]['sell']
        
        # –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–µ-BYN –≤–∞–ª—é—Ç–∞–º–∏ —á–µ—Ä–µ–∑ BYN
        if from_curr in self.currency_rates and to_curr in self.currency_rates:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º from_curr -> BYN -> to_curr
            from_to_byn = 1.0 / self.currency_rates[from_curr]['sell']
            byn_to_to = self.currency_rates[to_curr]['buy']
            return from_to_byn * byn_to_to
        
        return None

    def refresh_currency_rates(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
        if not REQUESTS_AVAILABLE:
            self.currency_info.setText("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n(–¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ requests)")
            return
            
        self.currency_info.setText("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...")
        if self.fetch_currency_rates():
            self.currency_info.setText("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        else:
            self.currency_info.setText("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç")

    def convert_currency(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –ë–µ–ª–∞—Ä—É—Å–±–∞–Ω–∫–∞"""
        amount = self.amount_input.text()
        from_curr = self.from_currency.currentText().upper()
        to_curr = self.to_currency.currentText().upper()
        
        if not amount or not from_curr or not to_curr:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–û—à–∏–±–∫–∞")
            msg_box.setText("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!")
            msg_box.setIcon(QMessageBox.Warning)
            msg_box.setStyleSheet(self.styles.get_main_style())
            msg_box.exec_()
            return
        
        try:
            amount_float = float(amount)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
            rate = self.get_currency_rate(from_curr, to_curr)
            
            if rate is None:
                msg_box = QMessageBox(self)
                msg_box.setWindowTitle("–û—à–∏–±–∫–∞")
                msg_box.setText(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {from_curr} -> {to_curr}.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                msg_box.setIcon(QMessageBox.Warning)
                msg_box.setStyleSheet(self.styles.get_main_style())
                msg_box.exec_()
                return
            
            result = amount_float * rate
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result >= 1000000:
                result_text = f"{result:,.0f}"
            elif result >= 1000:
                result_text = f"{result:,.2f}"
            else:
                result_text = f"{result:.4f}"
            
            self.currency_result.setText(f"{amount} {from_curr} = {result_text} {to_curr}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if REQUESTS_AVAILABLE and self.last_currency_update:
                update_time = self.last_currency_update.strftime("%H:%M:%S")
                self.currency_info.setText(f"–ö—É—Ä—Å: 1 {from_curr} = {rate:.6f} {to_curr}\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}")
            else:
                self.currency_info.setText(f"–ö—É—Ä—Å: 1 {from_curr} = {rate:.6f} {to_curr}\n(–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã)")
            
        except ValueError:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–û—à–∏–±–∫–∞")
            msg_box.setText("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
            msg_box.setIcon(QMessageBox.Warning)
            msg_box.setStyleSheet(self.styles.get_main_style())
            msg_box.exec_()
        except Exception as e:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–û—à–∏–±–∫–∞")
            msg_box.setText(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")
            msg_box.setIcon(QMessageBox.Warning)
            msg_box.setStyleSheet(self.styles.get_main_style())
            msg_box.exec_()

    def calculate_credit(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç"""
        try:
            amount = float(self.credit_amount.text())
            rate = float(self.credit_rate.text()) / 100 / 12  # –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞
            term = int(self.credit_term.text())
            currency = self.credit_currency.currentText()
            
            # –§–æ—Ä–º—É–ª–∞ –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            monthly_payment = amount * (rate * (1 + rate)**term) / ((1 + rate)**term - 1)
            total_payment = monthly_payment * term
            overpayment = total_payment - amount
            
            result = f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:.2f} {currency}\n"
            result += f"–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç: {total_payment:.2f} {currency}\n"
            result += f"–ü–µ—Ä–µ–ø–ª–∞—Ç–∞: {overpayment:.2f} {currency}"
            
            self.credit_result.setText(result)
        except ValueError:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–û—à–∏–±–∫–∞")
            msg_box.setText("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            msg_box.setIcon(QMessageBox.Warning)
            msg_box.setStyleSheet(self.styles.get_main_style())
            msg_box.exec_()

    def calculate_mortgage(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–ø–æ—Ç–µ–∫—É"""
        try:
            amount = float(self.mortgage_amount.text())
            down_payment = float(self.mortgage_down.text())
            rate = float(self.mortgage_rate.text()) / 100 / 12  # –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞
            term_years = int(self.mortgage_term.text())
            term_months = term_years * 12
            currency = self.mortgage_currency.currentText()
            
            loan_amount = amount - down_payment
            
            # –§–æ—Ä–º—É–ª–∞ –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            monthly_payment = loan_amount * (rate * (1 + rate)**term_months) / ((1 + rate)**term_months - 1)
            total_payment = monthly_payment * term_months
            overpayment = total_payment - loan_amount
            
            result = f"–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {loan_amount:.2f} {currency}\n"
            result += f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:.2f} {currency}\n"
            result += f"–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç: {total_payment:.2f} {currency}\n"
            result += f"–ü–µ—Ä–µ–ø–ª–∞—Ç–∞: {overpayment:.2f} {currency}"
            
            self.mortgage_result.setText(result)
        except ValueError:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–û—à–∏–±–∫–∞")
            msg_box.setText("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            msg_box.setIcon(QMessageBox.Warning)
            msg_box.setStyleSheet(self.styles.get_main_style())
            msg_box.exec_()

    def calculate_savings(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"""
        try:
            monthly = float(self.savings_monthly.text())
            rate = float(self.savings_rate.text()) / 100 / 12  # –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞
            term_years = int(self.savings_term.text())
            term_months = term_years * 12
            currency = self.savings_currency.currentText()
            
            # –§–æ—Ä–º—É–ª–∞ –±—É–¥—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–Ω–Ω—É–∏—Ç–µ—Ç–∞
            future_value = monthly * (((1 + rate)**term_months - 1) / rate)
            total_invested = monthly * term_months
            interest_earned = future_value - total_invested
            
            result = f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å: {monthly:.2f} {currency}\n"
            result += f"–û–±—â–∞—è —Å—É–º–º–∞ –≤–∑–Ω–æ—Å–æ–≤: {total_invested:.2f} {currency}\n"
            result += f"–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {future_value:.2f} {currency}\n"
            result += f"–î–æ—Ö–æ–¥ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {interest_earned:.2f} {currency}"
            
            self.savings_result.setText(result)
        except ValueError:
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle("–û—à–∏–±–∫–∞")
            msg_box.setText("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            msg_box.setIcon(QMessageBox.Warning)
            msg_box.setStyleSheet(self.styles.get_main_style())
            msg_box.exec_()

    def keyPressEvent(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à"""
        key = event.key()
        text = event.text()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ñ—Ä –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        if key in [Qt.Key_0, Qt.Key_1, Qt.Key_2, Qt.Key_3, Qt.Key_4,
                   Qt.Key_5, Qt.Key_6, Qt.Key_7, Qt.Key_8, Qt.Key_9]:
            self.on_button_click(text)
        elif key == Qt.Key_Plus:
            self.on_button_click('+')
        elif key == Qt.Key_Minus:
            self.on_button_click('-')
        elif key == Qt.Key_Asterisk or key == Qt.Key_multiply:
            self.on_button_click('*')
        elif key == Qt.Key_Slash or key == Qt.Key_division:
            self.on_button_click('/')
        elif key == Qt.Key_Period or key == Qt.Key_Comma:
            self.on_button_click('.')
        elif key == Qt.Key_Enter or key == Qt.Key_Return or key == Qt.Key_Equal:
            self.on_button_click('=')
        elif key == Qt.Key_Backspace:
            self.on_button_click('‚å´')
        elif key == Qt.Key_Escape:
            self.on_button_click('AC')
        elif key == Qt.Key_ParenLeft:
            self.on_button_click('(')
        elif key == Qt.Key_ParenRight:
            self.on_button_click(')')
        elif key == Qt.Key_Percent:
            self.on_button_click('%')
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –∫–∞–∫ —Ç–µ–∫—Å—Ç
            if text and text.isprintable():
                self.add_character(text)

        super().keyPressEvent(event)